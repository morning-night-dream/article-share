name: deproy terraform infra
description: deploy terraform infra. you should execute infra/setup action before.

inputs:
  project_env:
    description: "project env. ex. prod"
    required: true
  deploy:
    description: "whether to deploy. true/false. default true."
    default: 'true'
  lint:
    description: "whether to lint. true/false. default true."
    default: 'true'
  download_tfstate:
    description: "whether download tfstate. true/false. default false."
    default: 'false'
  gcp_project_id:
    description: "gcp project id"
    required: true
  gcp_cloud_storage_terraform_bucket:
    description: "name of google cloud storage bucket for tfstate"
    required: true
  secret_core_api_key:
    description: "secret of core api key"
    required: true
  secret_core_database_url:
    description: "secret of database url"
    required: true
  cloudbuild_file_path:
    description: "path to cloudbuild.yaml"
  working-directory:
    description: "working directory"
    default: ""

runs:
  using: composite
  steps:
    - name: Download .tfstate file from GCS
      if: ${{ inputs.download_tfstate == 'true' }}
      shell: sh
      run: gcloud storage cp gs://${{ inputs.gcp_cloud_storage_terraform_bucket }}/${{ inputs.project_env }}/gcp/terraform.tfstate terraform.tfstate
      working-directory: ${{ inputs.working-directory }}

    - name: Terraform init
      shell: sh
      run: terraform init
      working-directory: ${{ inputs.working-directory }}
    
    - name: Terraform format
      if: ${{ inputs.lint == 'true' }}
      shell: sh
      run: terraform fmt -recursive -check
      working-directory: ${{ inputs.working-directory }}
    
    - name: Terraform validate
      if: ${{ inputs.lint == 'true' }}
      shell: sh
      run: terraform validate
      working-directory: ${{ inputs.working-directory }}

    - name: Terraform plan
      if: ${{ inputs.lint == 'true' }}
      shell: sh
      run: |
        terraform plan \
          -var='project_prefix=mndp' \
          -var='project_env=${{ inputs.project_env }}' \
          -var='gcp_credentials_file_path=${{ env.GOOGLE_APPLICATION_CREDENTIALS }}' \
          -var='project_id=${{ inputs.gcp_project_id }}' \
          -var='secret_core_api_key=${{ inputs.secret_core_api_key }}' \
          -var='secret_core_database_url=${{ inputs.secret_core_database_url }}' \
          -var='git_repository_owner=${{ github.repository_owner }}' \
          -var="git_repository_name=$(echo ${{ github.repository }} | awk -F'[/]' '{print $2}')" \
          -var='core_cloud_build_file_path=${{ inputs.cloudbuild_file_path }}'
      working-directory: ${{ inputs.working-directory }}

    - name: Terraform apply
      if: ${{ inputs.deploy == 'true' }}
      shell: sh
      run: |
        terraform apply \
          -auto-approve \
          -var='project_prefix=mndp' \
          -var='project_env=${{ inputs.project_env }}' \
          -var='gcp_credentials_file_path=${{ env.GOOGLE_APPLICATION_CREDENTIALS }}' \
          -var='project_id=${{ inputs.gcp_project_id }}' \
          -var='secret_core_api_key=${{ inputs.secret_core_api_key }}' \
          -var='secret_core_database_url=${{ inputs.secret_core_database_url }}' \
          -var='git_repository_owner=${{ github.repository_owner }}' \
          -var="git_repository_name=$(echo ${{ github.repository }} | awk -F'[/]' '{print $2}')" \
          -var='core_cloud_build_file_path=${{ inputs.cloudbuild_file_path }}'
      working-directory: ${{ inputs.working-directory }}          

    - name: Upload .tfstate file to GCS
      if: ${{ inputs.deploy == 'true' }}
      shell: sh
      run: gcloud storage cp terraform.tfstate gs://${{ inputs.gcp_cloud_storage_terraform_bucket }}/${{ inputs.project_env }}/gcp/terraform.tfstate
      working-directory: ${{ inputs.working-directory }}
