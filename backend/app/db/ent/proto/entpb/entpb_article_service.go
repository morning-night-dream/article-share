// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	uuid "github.com/google/uuid"
	ent "github.com/morning-night-dream/platform/app/db/ent"
	article "github.com/morning-night-dream/platform/app/db/ent/article"
	articletag "github.com/morning-night-dream/platform/app/db/ent/articletag"
	readarticle "github.com/morning-night-dream/platform/app/db/ent/readarticle"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ArticleService implements ArticleServiceServer
type ArticleService struct {
	client *ent.Client
	UnimplementedArticleServiceServer
}

// NewArticleService returns a new ArticleService
func NewArticleService(client *ent.Client) *ArticleService {
	return &ArticleService{
		client: client,
	}
}

// toProtoArticle transforms the ent type to the pb type
func toProtoArticle(e *ent.Article) (*Article, error) {
	v := &Article{}
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	if e.DeletedAt != nil {
		deleted_at := timestamppb.New(*e.DeletedAt)
		v.DeletedAt = deleted_at
	}
	description := e.Description
	v.Description = description
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	thumbnail := e.Thumbnail
	v.Thumbnail = thumbnail
	title := e.Title
	v.Title = title
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	url := e.URL
	v.Url = url
	for _, edg := range e.Edges.ReadArticles {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.ReadArticles = append(v.ReadArticles, &ReadArticle{
			Id: id,
		})
	}
	for _, edg := range e.Edges.Tags {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Tags = append(v.Tags, &ArticleTag{
			Id: id,
		})
	}
	return v, nil
}

// toProtoArticleList transforms a list of ent type to a list of pb type
func toProtoArticleList(e []*ent.Article) ([]*Article, error) {
	var pbList []*Article
	for _, entEntity := range e {
		pbEntity, err := toProtoArticle(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements ArticleServiceServer.Create
func (svc *ArticleService) Create(ctx context.Context, req *CreateArticleRequest) (*Article, error) {
	article := req.GetArticle()
	m, err := svc.createBuilder(article)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoArticle(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements ArticleServiceServer.Get
func (svc *ArticleService) Get(ctx context.Context, req *GetArticleRequest) (*Article, error) {
	var (
		err error
		get *ent.Article
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case GetArticleRequest_VIEW_UNSPECIFIED, GetArticleRequest_BASIC:
		get, err = svc.client.Article.Get(ctx, id)
	case GetArticleRequest_WITH_EDGE_IDS:
		get, err = svc.client.Article.Query().
			Where(article.ID(id)).
			WithReadArticles(func(query *ent.ReadArticleQuery) {
				query.Select(readarticle.FieldID)
			}).
			WithTags(func(query *ent.ArticleTagQuery) {
				query.Select(articletag.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoArticle(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements ArticleServiceServer.Update
func (svc *ArticleService) Update(ctx context.Context, req *UpdateArticleRequest) (*Article, error) {
	article := req.GetArticle()
	var articleID uuid.UUID
	if err := (&articleID).UnmarshalBinary(article.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.Article.UpdateOneID(articleID)
	articleCreatedAt := runtime.ExtractTime(article.GetCreatedAt())
	m.SetCreatedAt(articleCreatedAt)
	if article.GetDeletedAt() != nil {
		articleDeletedAt := runtime.ExtractTime(article.GetDeletedAt())
		m.SetDeletedAt(articleDeletedAt)
	}
	articleDescription := article.GetDescription()
	m.SetDescription(articleDescription)
	articleThumbnail := article.GetThumbnail()
	m.SetThumbnail(articleThumbnail)
	articleTitle := article.GetTitle()
	m.SetTitle(articleTitle)
	articleUpdatedAt := runtime.ExtractTime(article.GetUpdatedAt())
	m.SetUpdatedAt(articleUpdatedAt)
	articleURL := article.GetUrl()
	m.SetURL(articleURL)
	for _, item := range article.GetReadArticles() {
		var readarticles uuid.UUID
		if err := (&readarticles).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddReadArticleIDs(readarticles)
	}
	for _, item := range article.GetTags() {
		var tags uuid.UUID
		if err := (&tags).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddTagIDs(tags)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoArticle(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements ArticleServiceServer.Delete
func (svc *ArticleService) Delete(ctx context.Context, req *DeleteArticleRequest) (*emptypb.Empty, error) {
	var err error
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.Article.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements ArticleServiceServer.List
func (svc *ArticleService) List(ctx context.Context, req *ListArticleRequest) (*ListArticleResponse, error) {
	var (
		err      error
		entList  []*ent.Article
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Article.Query().
		Order(ent.Desc(article.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken, err := uuid.ParseBytes(bytes)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		listQuery = listQuery.
			Where(article.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListArticleRequest_VIEW_UNSPECIFIED, ListArticleRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListArticleRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithReadArticles(func(query *ent.ReadArticleQuery) {
				query.Select(readarticle.FieldID)
			}).
			WithTags(func(query *ent.ArticleTagQuery) {
				query.Select(articletag.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoArticleList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListArticleResponse{
			ArticleList:   protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements ArticleServiceServer.BatchCreate
func (svc *ArticleService) BatchCreate(ctx context.Context, req *BatchCreateArticlesRequest) (*BatchCreateArticlesResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.ArticleCreate, len(requests))
	for i, req := range requests {
		article := req.GetArticle()
		var err error
		bulk[i], err = svc.createBuilder(article)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Article.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoArticleList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateArticlesResponse{
			Articles: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *ArticleService) createBuilder(article *Article) (*ent.ArticleCreate, error) {
	m := svc.client.Article.Create()
	articleCreatedAt := runtime.ExtractTime(article.GetCreatedAt())
	m.SetCreatedAt(articleCreatedAt)
	if article.GetDeletedAt() != nil {
		articleDeletedAt := runtime.ExtractTime(article.GetDeletedAt())
		m.SetDeletedAt(articleDeletedAt)
	}
	articleDescription := article.GetDescription()
	m.SetDescription(articleDescription)
	articleThumbnail := article.GetThumbnail()
	m.SetThumbnail(articleThumbnail)
	articleTitle := article.GetTitle()
	m.SetTitle(articleTitle)
	articleUpdatedAt := runtime.ExtractTime(article.GetUpdatedAt())
	m.SetUpdatedAt(articleUpdatedAt)
	articleURL := article.GetUrl()
	m.SetURL(articleURL)
	for _, item := range article.GetReadArticles() {
		var readarticles uuid.UUID
		if err := (&readarticles).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddReadArticleIDs(readarticles)
	}
	for _, item := range article.GetTags() {
		var tags uuid.UUID
		if err := (&tags).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddTagIDs(tags)
	}
	return m, nil
}
