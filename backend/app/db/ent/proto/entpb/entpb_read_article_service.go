// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	uuid "github.com/google/uuid"
	ent "github.com/morning-night-dream/platform/app/db/ent"
	article "github.com/morning-night-dream/platform/app/db/ent/article"
	readarticle "github.com/morning-night-dream/platform/app/db/ent/readarticle"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ReadArticleService implements ReadArticleServiceServer
type ReadArticleService struct {
	client *ent.Client
	UnimplementedReadArticleServiceServer
}

// NewReadArticleService returns a new ReadArticleService
func NewReadArticleService(client *ent.Client) *ReadArticleService {
	return &ReadArticleService{
		client: client,
	}
}

// toProtoReadArticle transforms the ent type to the pb type
func toProtoReadArticle(e *ent.ReadArticle) (*ReadArticle, error) {
	v := &ReadArticle{}
	article, err := e.ArticleID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.ArticleId = article
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	read_at := timestamppb.New(e.ReadAt)
	v.ReadAt = read_at
	user_id, err := e.UserID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.UserId = user_id
	if edg := e.Edges.Article; edg != nil {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Article = &Article{
			Id: id,
		}
	}
	return v, nil
}

// toProtoReadArticleList transforms a list of ent type to a list of pb type
func toProtoReadArticleList(e []*ent.ReadArticle) ([]*ReadArticle, error) {
	var pbList []*ReadArticle
	for _, entEntity := range e {
		pbEntity, err := toProtoReadArticle(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements ReadArticleServiceServer.Create
func (svc *ReadArticleService) Create(ctx context.Context, req *CreateReadArticleRequest) (*ReadArticle, error) {
	readarticle := req.GetReadArticle()
	m, err := svc.createBuilder(readarticle)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoReadArticle(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements ReadArticleServiceServer.Get
func (svc *ReadArticleService) Get(ctx context.Context, req *GetReadArticleRequest) (*ReadArticle, error) {
	var (
		err error
		get *ent.ReadArticle
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case GetReadArticleRequest_VIEW_UNSPECIFIED, GetReadArticleRequest_BASIC:
		get, err = svc.client.ReadArticle.Get(ctx, id)
	case GetReadArticleRequest_WITH_EDGE_IDS:
		get, err = svc.client.ReadArticle.Query().
			Where(readarticle.ID(id)).
			WithArticle(func(query *ent.ArticleQuery) {
				query.Select(article.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoReadArticle(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements ReadArticleServiceServer.Update
func (svc *ReadArticleService) Update(ctx context.Context, req *UpdateReadArticleRequest) (*ReadArticle, error) {
	readarticle := req.GetReadArticle()
	var readarticleID uuid.UUID
	if err := (&readarticleID).UnmarshalBinary(readarticle.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.ReadArticle.UpdateOneID(readarticleID)
	var readarticleArticleID uuid.UUID
	if err := (&readarticleArticleID).UnmarshalBinary(readarticle.GetArticleId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetArticleID(readarticleArticleID)
	readarticleReadAt := runtime.ExtractTime(readarticle.GetReadAt())
	m.SetReadAt(readarticleReadAt)
	var readarticleUserID uuid.UUID
	if err := (&readarticleUserID).UnmarshalBinary(readarticle.GetUserId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetUserID(readarticleUserID)
	if readarticle.GetArticle() != nil {
		var readarticleArticle uuid.UUID
		if err := (&readarticleArticle).UnmarshalBinary(readarticle.GetArticle().GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.SetArticleID(readarticleArticle)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoReadArticle(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements ReadArticleServiceServer.Delete
func (svc *ReadArticleService) Delete(ctx context.Context, req *DeleteReadArticleRequest) (*emptypb.Empty, error) {
	var err error
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.ReadArticle.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements ReadArticleServiceServer.List
func (svc *ReadArticleService) List(ctx context.Context, req *ListReadArticleRequest) (*ListReadArticleResponse, error) {
	var (
		err      error
		entList  []*ent.ReadArticle
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.ReadArticle.Query().
		Order(ent.Desc(readarticle.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken, err := uuid.ParseBytes(bytes)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		listQuery = listQuery.
			Where(readarticle.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListReadArticleRequest_VIEW_UNSPECIFIED, ListReadArticleRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListReadArticleRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithArticle(func(query *ent.ArticleQuery) {
				query.Select(article.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoReadArticleList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListReadArticleResponse{
			ReadArticleList: protoList,
			NextPageToken:   nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements ReadArticleServiceServer.BatchCreate
func (svc *ReadArticleService) BatchCreate(ctx context.Context, req *BatchCreateReadArticlesRequest) (*BatchCreateReadArticlesResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.ReadArticleCreate, len(requests))
	for i, req := range requests {
		readarticle := req.GetReadArticle()
		var err error
		bulk[i], err = svc.createBuilder(readarticle)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.ReadArticle.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoReadArticleList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateReadArticlesResponse{
			ReadArticles: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *ReadArticleService) createBuilder(readarticle *ReadArticle) (*ent.ReadArticleCreate, error) {
	m := svc.client.ReadArticle.Create()
	var readarticleArticleID uuid.UUID
	if err := (&readarticleArticleID).UnmarshalBinary(readarticle.GetArticleId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetArticleID(readarticleArticleID)
	readarticleReadAt := runtime.ExtractTime(readarticle.GetReadAt())
	m.SetReadAt(readarticleReadAt)
	var readarticleUserID uuid.UUID
	if err := (&readarticleUserID).UnmarshalBinary(readarticle.GetUserId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetUserID(readarticleUserID)
	if readarticle.GetArticle() != nil {
		var readarticleArticle uuid.UUID
		if err := (&readarticleArticle).UnmarshalBinary(readarticle.GetArticle().GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.SetArticleID(readarticleArticle)
	}
	return m, nil
}
