// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	uuid "github.com/google/uuid"
	ent "github.com/morning-night-dream/platform/app/db/ent"
	auth "github.com/morning-night-dream/platform/app/db/ent/auth"
	user "github.com/morning-night-dream/platform/app/db/ent/user"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// AuthService implements AuthServiceServer
type AuthService struct {
	client *ent.Client
	UnimplementedAuthServiceServer
}

// NewAuthService returns a new AuthService
func NewAuthService(client *ent.Client) *AuthService {
	return &AuthService{
		client: client,
	}
}

// toProtoAuth transforms the ent type to the pb type
func toProtoAuth(e *ent.Auth) (*Auth, error) {
	v := &Auth{}
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	email := e.Email
	v.Email = email
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	login_id := e.LoginID
	v.LoginId = login_id
	password := e.Password
	v.Password = password
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	user, err := e.UserID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.UserId = user
	if edg := e.Edges.User; edg != nil {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.User = &User{
			Id: id,
		}
	}
	return v, nil
}

// toProtoAuthList transforms a list of ent type to a list of pb type
func toProtoAuthList(e []*ent.Auth) ([]*Auth, error) {
	var pbList []*Auth
	for _, entEntity := range e {
		pbEntity, err := toProtoAuth(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements AuthServiceServer.Create
func (svc *AuthService) Create(ctx context.Context, req *CreateAuthRequest) (*Auth, error) {
	auth := req.GetAuth()
	m, err := svc.createBuilder(auth)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoAuth(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements AuthServiceServer.Get
func (svc *AuthService) Get(ctx context.Context, req *GetAuthRequest) (*Auth, error) {
	var (
		err error
		get *ent.Auth
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case GetAuthRequest_VIEW_UNSPECIFIED, GetAuthRequest_BASIC:
		get, err = svc.client.Auth.Get(ctx, id)
	case GetAuthRequest_WITH_EDGE_IDS:
		get, err = svc.client.Auth.Query().
			Where(auth.ID(id)).
			WithUser(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoAuth(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements AuthServiceServer.Update
func (svc *AuthService) Update(ctx context.Context, req *UpdateAuthRequest) (*Auth, error) {
	auth := req.GetAuth()
	var authID uuid.UUID
	if err := (&authID).UnmarshalBinary(auth.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.Auth.UpdateOneID(authID)
	authCreatedAt := runtime.ExtractTime(auth.GetCreatedAt())
	m.SetCreatedAt(authCreatedAt)
	authEmail := auth.GetEmail()
	m.SetEmail(authEmail)
	authLoginID := auth.GetLoginId()
	m.SetLoginID(authLoginID)
	authPassword := auth.GetPassword()
	m.SetPassword(authPassword)
	authUpdatedAt := runtime.ExtractTime(auth.GetUpdatedAt())
	m.SetUpdatedAt(authUpdatedAt)
	var authUserID uuid.UUID
	if err := (&authUserID).UnmarshalBinary(auth.GetUserId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetUserID(authUserID)
	if auth.GetUser() != nil {
		var authUser uuid.UUID
		if err := (&authUser).UnmarshalBinary(auth.GetUser().GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.SetUserID(authUser)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoAuth(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements AuthServiceServer.Delete
func (svc *AuthService) Delete(ctx context.Context, req *DeleteAuthRequest) (*emptypb.Empty, error) {
	var err error
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.Auth.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements AuthServiceServer.List
func (svc *AuthService) List(ctx context.Context, req *ListAuthRequest) (*ListAuthResponse, error) {
	var (
		err      error
		entList  []*ent.Auth
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Auth.Query().
		Order(ent.Desc(auth.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken, err := uuid.ParseBytes(bytes)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		listQuery = listQuery.
			Where(auth.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListAuthRequest_VIEW_UNSPECIFIED, ListAuthRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListAuthRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithUser(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoAuthList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListAuthResponse{
			AuthList:      protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements AuthServiceServer.BatchCreate
func (svc *AuthService) BatchCreate(ctx context.Context, req *BatchCreateAuthsRequest) (*BatchCreateAuthsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.AuthCreate, len(requests))
	for i, req := range requests {
		auth := req.GetAuth()
		var err error
		bulk[i], err = svc.createBuilder(auth)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Auth.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoAuthList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateAuthsResponse{
			Auths: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *AuthService) createBuilder(auth *Auth) (*ent.AuthCreate, error) {
	m := svc.client.Auth.Create()
	authCreatedAt := runtime.ExtractTime(auth.GetCreatedAt())
	m.SetCreatedAt(authCreatedAt)
	authEmail := auth.GetEmail()
	m.SetEmail(authEmail)
	authLoginID := auth.GetLoginId()
	m.SetLoginID(authLoginID)
	authPassword := auth.GetPassword()
	m.SetPassword(authPassword)
	authUpdatedAt := runtime.ExtractTime(auth.GetUpdatedAt())
	m.SetUpdatedAt(authUpdatedAt)
	var authUserID uuid.UUID
	if err := (&authUserID).UnmarshalBinary(auth.GetUserId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetUserID(authUserID)
	if auth.GetUser() != nil {
		var authUser uuid.UUID
		if err := (&authUser).UnmarshalBinary(auth.GetUser().GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.SetUserID(authUser)
	}
	return m, nil
}
