// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	uuid "github.com/google/uuid"
	ent "github.com/morning-night-dream/platform/app/db/ent"
	article "github.com/morning-night-dream/platform/app/db/ent/article"
	articletag "github.com/morning-night-dream/platform/app/db/ent/articletag"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ArticleTagService implements ArticleTagServiceServer
type ArticleTagService struct {
	client *ent.Client
	UnimplementedArticleTagServiceServer
}

// NewArticleTagService returns a new ArticleTagService
func NewArticleTagService(client *ent.Client) *ArticleTagService {
	return &ArticleTagService{
		client: client,
	}
}

// toProtoArticleTag transforms the ent type to the pb type
func toProtoArticleTag(e *ent.ArticleTag) (*ArticleTag, error) {
	v := &ArticleTag{}
	article, err := e.ArticleID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.ArticleId = article
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	tag := e.Tag
	v.Tag = tag
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	if edg := e.Edges.Article; edg != nil {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Article = &Article{
			Id: id,
		}
	}
	return v, nil
}

// toProtoArticleTagList transforms a list of ent type to a list of pb type
func toProtoArticleTagList(e []*ent.ArticleTag) ([]*ArticleTag, error) {
	var pbList []*ArticleTag
	for _, entEntity := range e {
		pbEntity, err := toProtoArticleTag(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements ArticleTagServiceServer.Create
func (svc *ArticleTagService) Create(ctx context.Context, req *CreateArticleTagRequest) (*ArticleTag, error) {
	articletag := req.GetArticleTag()
	m, err := svc.createBuilder(articletag)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoArticleTag(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements ArticleTagServiceServer.Get
func (svc *ArticleTagService) Get(ctx context.Context, req *GetArticleTagRequest) (*ArticleTag, error) {
	var (
		err error
		get *ent.ArticleTag
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case GetArticleTagRequest_VIEW_UNSPECIFIED, GetArticleTagRequest_BASIC:
		get, err = svc.client.ArticleTag.Get(ctx, id)
	case GetArticleTagRequest_WITH_EDGE_IDS:
		get, err = svc.client.ArticleTag.Query().
			Where(articletag.ID(id)).
			WithArticle(func(query *ent.ArticleQuery) {
				query.Select(article.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoArticleTag(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements ArticleTagServiceServer.Update
func (svc *ArticleTagService) Update(ctx context.Context, req *UpdateArticleTagRequest) (*ArticleTag, error) {
	articletag := req.GetArticleTag()
	var articletagID uuid.UUID
	if err := (&articletagID).UnmarshalBinary(articletag.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.ArticleTag.UpdateOneID(articletagID)
	var articletagArticleID uuid.UUID
	if err := (&articletagArticleID).UnmarshalBinary(articletag.GetArticleId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetArticleID(articletagArticleID)
	articletagCreatedAt := runtime.ExtractTime(articletag.GetCreatedAt())
	m.SetCreatedAt(articletagCreatedAt)
	articletagTag := articletag.GetTag()
	m.SetTag(articletagTag)
	articletagUpdatedAt := runtime.ExtractTime(articletag.GetUpdatedAt())
	m.SetUpdatedAt(articletagUpdatedAt)
	if articletag.GetArticle() != nil {
		var articletagArticle uuid.UUID
		if err := (&articletagArticle).UnmarshalBinary(articletag.GetArticle().GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.SetArticleID(articletagArticle)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoArticleTag(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements ArticleTagServiceServer.Delete
func (svc *ArticleTagService) Delete(ctx context.Context, req *DeleteArticleTagRequest) (*emptypb.Empty, error) {
	var err error
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.ArticleTag.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements ArticleTagServiceServer.List
func (svc *ArticleTagService) List(ctx context.Context, req *ListArticleTagRequest) (*ListArticleTagResponse, error) {
	var (
		err      error
		entList  []*ent.ArticleTag
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.ArticleTag.Query().
		Order(ent.Desc(articletag.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken, err := uuid.ParseBytes(bytes)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		listQuery = listQuery.
			Where(articletag.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListArticleTagRequest_VIEW_UNSPECIFIED, ListArticleTagRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListArticleTagRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithArticle(func(query *ent.ArticleQuery) {
				query.Select(article.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoArticleTagList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListArticleTagResponse{
			ArticleTagList: protoList,
			NextPageToken:  nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements ArticleTagServiceServer.BatchCreate
func (svc *ArticleTagService) BatchCreate(ctx context.Context, req *BatchCreateArticleTagsRequest) (*BatchCreateArticleTagsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.ArticleTagCreate, len(requests))
	for i, req := range requests {
		articletag := req.GetArticleTag()
		var err error
		bulk[i], err = svc.createBuilder(articletag)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.ArticleTag.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoArticleTagList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateArticleTagsResponse{
			ArticleTags: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *ArticleTagService) createBuilder(articletag *ArticleTag) (*ent.ArticleTagCreate, error) {
	m := svc.client.ArticleTag.Create()
	var articletagArticleID uuid.UUID
	if err := (&articletagArticleID).UnmarshalBinary(articletag.GetArticleId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetArticleID(articletagArticleID)
	articletagCreatedAt := runtime.ExtractTime(articletag.GetCreatedAt())
	m.SetCreatedAt(articletagCreatedAt)
	articletagTag := articletag.GetTag()
	m.SetTag(articletagTag)
	articletagUpdatedAt := runtime.ExtractTime(articletag.GetUpdatedAt())
	m.SetUpdatedAt(articletagUpdatedAt)
	if articletag.GetArticle() != nil {
		var articletagArticle uuid.UUID
		if err := (&articletagArticle).UnmarshalBinary(articletag.GetArticle().GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.SetArticleID(articletagArticle)
	}
	return m, nil
}
